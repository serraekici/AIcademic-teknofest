import os
from dotenv import load_dotenv
from openai import OpenAI
import requests
from flask import Flask, request, jsonify
from flask_cors import CORS

app = Flask(__name__)
CORS(app)

# .env dosyasÄ±ndan API anahtarÄ±nÄ± al
load_dotenv()
api_key = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=api_key)

def examlari_api_ile_cek(token):
    url = "http://127.0.0.1:8000/api/exam-schedules/"
    headers = {"Authorization": f"Bearer {token}"}
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        exams = response.json()
        dersler = []
        for e in exams:
            dersler.append({
                "ders": e["course_name"],  # <-- Burada dÃ¼zeltme yaptÄ±k!
                "tarih": e["exam_date"]
            })
        return dersler
    else:
        print("API'dan veri alÄ±namadÄ±! (Status code:", response.status_code, ")")
        print("Hata:", response.text)
        return []

def plan_prompt_olustur(dersler, yontem):
    ders_bilgisi = "\n".join([f"- {d['ders']}: {d['tarih']}" for d in dersler])
    prompt = f"""
Sen bir yapay zeka destekli eÄŸitim danÄ±ÅŸmanÄ±sÄ±n.
Ã–ÄŸrencinin sÄ±nav tarihleri ve tercih ettiÄŸi Ã§alÄ±ÅŸma yÃ¶ntemi aÅŸaÄŸÄ±da verilmiÅŸtir.

ðŸ§  Ã‡alÄ±ÅŸma YÃ¶ntemi: {yontem.upper()}
ðŸ“† SÄ±nav Takvimi:
{ders_bilgisi}

Kurallar:
- Plan, {yontem} yÃ¶ntemine uygun hazÄ±rlanmalÄ±.
- GÃ¼nlÃ¼k plan sade, uygulanabilir ve Ã¶ÄŸrenci dostu olsun.
- EÄŸer Pomodoro ise: 25 dakika Ã§alÄ±ÅŸma + 5 dakika mola, 4 setten sonra uzun mola.
- EÄŸer Blok ise: 60-90 dakikalÄ±k odaklanmÄ±ÅŸ seanslar Ã¶ner.
- EÄŸer Klasik ise: her ders iÃ§in belirli gÃ¼n ve saat Ã¶ner.
- EÄŸer YoÄŸun Tekrar ise: sÄ±nava yakÄ±n dÃ¶nemde tekrar odaklÄ± plan yap.
- PlanÄ± haftalÄ±k ya da gÃ¼nlÃ¼k olarak listele.

Åžimdi bu bilgilere gÃ¶re detaylÄ± bir Ã§alÄ±ÅŸma planÄ± oluÅŸtur.
"""
    return prompt

def plan_olustur(dersler, calisma_yontemi):
    prompt = plan_prompt_olustur(dersler, calisma_yontemi)
    response = client.chat.completions.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": "Sen kiÅŸiye Ã¶zel Ã§alÄ±ÅŸma planÄ± hazÄ±rlayan bir eÄŸitim danÄ±ÅŸmanÄ±sÄ±n."},
            {"role": "user", "content": prompt}
        ]
    )
    return response.choices[0].message.content

@app.route('/api/generate-study-plan/', methods=['POST'])
def generate_study_plan():
    data = request.get_json()
    study_method = data.get('study_method')
    jwt_token = data.get('jwt_token')

    dersler = examlari_api_ile_cek(jwt_token)
    if not dersler:
        return jsonify({'error': 'Exam data could not be fetched'}), 400

    plan = plan_olustur(dersler, study_method)
    return jsonify({'plan': plan})

if __name__ == "__main__":
    app.run(port=5000, debug=True)
